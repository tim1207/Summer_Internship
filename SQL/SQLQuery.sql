-- 1. 請列出每個使用者每年借書數量，並依使用者編號和年度做排序
-- TODO LEFT JOIN AS 
SELECT
	M.[USER_ID] AS KeeperId
   ,M.USER_CNAME AS CName
   ,M.USER_ENAME AS EName
   ,YEAR(LEND_DATE) AS BorrowYear
   ,COUNT(BOOK_ID) AS BorrowCnt
   ,COUNT(M.[USER_ID]) AS BorrowCnt
FROM MEMBER_M AS M
LEFT JOIN BOOK_LEND_RECORD AS L
	ON L.KEEPER_ID = M.[USER_ID]
GROUP BY [USER_ID]
		,USER_CNAME
		,USER_ENAME
		,YEAR(LEND_DATE)
ORDER BY KeeperId, BorrowYear;


-- 2. 列出最受歡迎的書前五名(借閱數量最多前五名)
-- WITH TIES
SELECT TOP (5) WITH TIES
	L.BOOK_ID
   ,BOOK_NAME
   ,COUNT(L.BOOK_ID) AS QTY
FROM BOOK_LEND_RECORD L
INNER JOIN BOOK_DATA D
	ON L.BOOK_ID = D.BOOK_ID
GROUP BY L.BOOK_ID
		,D.BOOK_NAME
ORDER BY QTY DESC

-- 3. 以一季列出2019年每一季書籍借閱書量 (請考慮未來需求調整對程式的變動幅度)
-- COUNT(1) as Cnt
SELECT
	s.SPAN_YEAR + '/' + s.SPAN_START + '~' + s.SPAN_YEAR + '/' + s.SPAN_END AS [Quarter]
   ,COUNT(L.BOOK_ID) AS Cnt
FROM BOOK_LEND_RECORD L
INNER JOIN SPAN_TABLE s
	ON YEAR(L.LEND_DATE) = s.SPAN_YEAR
		AND MONTH(L.LEND_DATE) BETWEEN s.SPAN_START AND s.SPAN_END
WHERE s.SPAN_YEAR = 2019
GROUP BY s.SPAN_YEAR
		,s.SPAN_START
		,s.SPAN_END
ORDER BY [quarter];


-- 4. 撈出每個分類借閱數量前三名書本及數量

WITH Lend
AS
(SELECT
		RANK() OVER (PARTITION BY BOOK_CLASS_NAME ORDER BY COUNT(L.BOOK_ID) DESC, D.BOOK_ID) AS Seq
	   ,BOOK_CLASS_NAME AS BookClass
	   ,D.BOOK_ID AS BookId
	   ,BOOK_NAME AS BookName
	   ,COUNT(L.BOOK_ID) AS Cnt
	FROM BOOK_CLASS AS C
	LEFT JOIN BOOK_DATA AS D
		ON C.BOOK_CLASS_ID = D.BOOK_CLASS_ID
	INNER JOIN BOOK_LEND_RECORD AS L
		ON D.BOOK_ID = L.BOOK_ID

	GROUP BY BOOK_CLASS_NAME
			,D.BOOK_ID
			,D.BOOK_NAME)

SELECT
	L.BookClass
   ,L.BookId
   ,L.BookName
   ,L.Cnt
FROM Lend L
WHERE L.Seq <= 3

--5.  請列出 2016, 2017, 2018, 2019 各書籍類別的借閱數量比較
-- ,COUNT(CASE
--		WHEN YEAR(L.LEND_DATE) = 2016 THEN 1
--		ELSE NULL
--	END) AS CNT2016

SELECT
	C.BOOK_CLASS_ID
   ,C.BOOK_CLASS_NAME
   ,SUM(CASE
		WHEN YEAR(L.LEND_DATE) = 2016 THEN 1
		ELSE 0
	END) AS CNT2016
   ,SUM(CASE
		WHEN YEAR(L.LEND_DATE) = 2017 THEN 1
		ELSE 0
	END) AS CNT2017
   ,SUM(CASE
		WHEN YEAR(L.LEND_DATE) = 2018 THEN 1
		ELSE 0
	END) AS CNT2018
   ,SUM(CASE
		WHEN YEAR(L.LEND_DATE) = 2019 THEN 1
		ELSE 0
	END) AS CNT2019
FROM BOOK_CLASS AS C
LEFT JOIN (BOOK_DATA AS D
INNER JOIN BOOK_LEND_RECORD AS L
	ON D.BOOK_ID = L.BOOK_ID)
	ON C.BOOK_CLASS_ID = D.BOOK_CLASS_ID
GROUP BY C.BOOK_CLASS_ID
		,C.BOOK_CLASS_NAME
ORDER BY C.BOOK_CLASS_ID;



-- 6. 請使用 PIVOT 語法列出2016, 2017, 2018, 2019 各書籍類別的借閱數量比較

SELECT
	ClassId
   ,ClassName
   ,[2016] AS CNT2016
   ,[2017] AS CNT2017
   ,[2018] AS CNT2018
   ,[2019] AS CNT2019
FROM (SELECT
		C.BOOK_CLASS_ID AS ClassId
	   ,C.BOOK_CLASS_NAME AS ClassName
	   ,YEAR(L.LEND_DATE) AS LendYear
	FROM BOOK_CLASS AS C
	LEFT JOIN (BOOK_DATA AS D
	INNER JOIN BOOK_LEND_RECORD AS L
		ON D.BOOK_ID = L.BOOK_ID)
		ON C.BOOK_CLASS_ID = D.BOOK_CLASS_ID) AS T
PIVOT (COUNT(T.LendYear) FOR T.LendYear
IN ([2016], [2017], [2018], [2019])) AS pvt
ORDER BY pvt.ClassId;


-- 7. 呈上，請使用 PIVOT 語法列出 2016, 2017, 2018, 2019 各書籍類別的借閱數量比較 (動態分析所有年度)
-- N' utf-8 編碼 NVARCHAR AND VANCHAR
-- NVARCHAR(MAX)的問題
-- CHAR 固定的 VARCHAR 可變動
SELECT
	'A' + CONVERT(CHAR(10), '') + 'B'
SELECT
	'A' + CONVERT(VARCHAR(10), '') + 'B'
SELECT
	'A' + RTRIM(CONVERT(CHAR(10), '')) + 'B'



DECLARE @SQLString AS NVARCHAR(MAX)
DECLARE @EachYear AS NVARCHAR(MAX)
DECLARE @YearStr AS NVARCHAR(MAX)

SELECT
	@EachYear = ISNULL(@EachYear + ',', '') + QUOTENAME(YEAR(LEND_DATE))
   ,@YearStr = ISNULL(@YearStr + ',', '') + QUOTENAME(YEAR(LEND_DATE)) + 'AS CNT' + CONVERT(NVARCHAR(MAX), YEAR(LEND_DATE))
FROM BOOK_LEND_RECORD
GROUP BY QUOTENAME(YEAR(LEND_DATE))
		,YEAR(LEND_DATE);

PRINT (@YearStr)


SET @SQLString = N'
SELECT ClassId, 
		
		ClassName,
		' + @YearStr + N'
		
FROM (
	SELECT C.BOOK_CLASS_ID AS ClassId, 
			C.BOOK_CLASS_NAME AS ClassName, 
			YEAR(L.LEND_DATE) AS LendYear
	FROM BOOK_CLASS AS C
	LEFT JOIN (BOOK_DATA AS D
	INNER JOIN BOOK_LEND_RECORD AS L
	ON D.BOOK_ID = L.BOOK_ID)
		ON C.BOOK_CLASS_ID = D.BOOK_CLASS_ID
) AS T 
PIVOT (COUNT(T.LendYear) FOR T.LendYear 
IN (' + @EachYear + N')) AS pvt
ORDER BY pvt.ClassId;'
--EXEC (@SQLString)
EXEC sys.sp_executesql @statement = @SQLString;


-- 8. 請查詢出李四(USER_ID =0002)的借書紀錄，其中包含書本ID、購書日期(yyyy/mm/dd)、借閱日期(yyyy/mm/dd)、
--書籍類別(id-name)、借閱人(id-cname(ename))、狀態(id-name)、購書金額
--Table：BOOK_DATA、BOOK_LEND_RECORD、BOOK_CLASS、BOOK_CODE
-- TODO :格式問題 
SELECT
	USER_ID()

SELECT
	D.BOOK_ID AS 書本ID
   ,CONVERT(VARCHAR(10), D.BOOK_BOUGHT_DATE, 111) AS 購書日期
   ,CONVERT(VARCHAR(10), L.LEND_DATE, 111) AS 借閱日期
   ,C.BOOK_CLASS_ID + '-' + C.BOOK_CLASS_NAME AS 書籍類別
   ,M.[USER_ID] + '-' + M.USER_CNAME + '(' + M.USER_ENAME + ')' AS 借閱人
   ,CO.CODE_ID + '-' + CO.CODE_NAME AS 狀態
   ,FORMAT(D.BOOK_AMOUNT, '#,#') + '元' AS 購書金額
FROM MEMBER_M AS M
INNER JOIN BOOK_LEND_RECORD AS L
	ON M.[USER_ID] = L.KEEPER_ID
INNER JOIN BOOK_DATA AS D
	ON L.BOOK_ID = D.BOOK_ID
INNER JOIN BOOK_CLASS AS C
	ON C.BOOK_CLASS_ID = D.BOOK_CLASS_ID
INNER JOIN BOOK_CODE AS CO
	ON CO.CODE_ID = D.BOOK_STATUS
		AND CO.CODE_TYPE = 'BOOK_STATUS'

WHERE M.[USER_ID] = '0002'
ORDER BY 書本ID DESC;


-- 9. 新增一筆借閱紀錄，借書人為李四，書本ID為2294，借閱日期為2021/01/01，並更新書籍主檔的狀態為已借出且借閱人為李四
-- AIT+F1
BEGIN TRY
	BEGIN TRANSACTION
	--	INSERT INTO BOOK_LEND_RECORD (BOOK_ID, KEEPER_ID, LEND_DATE)
	--		VALUES ('2294', '0002', '2021-01-01')
	INSERT INTO BOOK_LEND_RECORD (BOOK_ID, KEEPER_ID, LEND_DATE, CRE_DATE, CRE_USR, MOD_DATE, MOD_USR)
		VALUES ('2294', '0002', '2021-01-01', GETDATE(), '0002', GETDATE(), '0002')

	-- INSERT INTO BOOK_LEND_RECORD (BOOK_ID, KEEPER_ID, LEND_DATE, CRE_DATE, CRE_USR, MOD_DATE, MOD_USR)
	-- SELECT('2294' AS  BOOK_ID .....)
	UPDATE BOOK_DATA
	SET BOOK_STATUS = 'B'
	WHERE BOOK_ID = '2294'

	COMMIT TRANSACTION
END TRY

BEGIN CATCH
	SELECT
		ERROR_MESSAGE()
	ROLLBACK TRANSACTION
END CATCH


-- 10. 請將題9新增的借閱紀錄(書本ID=2294)刪除
BEGIN TRY
	BEGIN TRANSACTION
	DELETE FROM BOOK_LEND_RECORD
	WHERE BOOK_ID = 2294
		AND KEEPER_ID = '0002';

	UPDATE BOOK_DATA
	SET BOOK_STATUS = 'A'
	WHERE BOOK_ID = '2294'

	COMMIT TRANSACTION
END TRY

BEGIN CATCH
	SELECT
		ERROR_MESSAGE()
	ROLLBACK TRANSACTION
END CATCH
